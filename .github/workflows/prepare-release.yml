# 参考記事
# https://zenn.dev/kshida/articles/auto-generate-release-note-with-calver

name: Prepare Release

on:
  pull_request:
    branches:
      - main
    # ラベルが付けられた時にキックする
    types:
      - labeled

jobs:
  prepare-release:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TZ: 'Asia/Tokyo'
      PR_URL: ${{github.event.pull_request.html_url}}

    outputs:
      version: ${{ steps.cur_version.outputs.version }}
      release_tag: ${{ steps.release_tag.outputs.release_tag }}
      release_note: ${{ steps.release_note.outputs.release_note }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # これが必要

      # 特定のラベルが付与されたかをチェック
      - name: Checking Release Approve Label
        if: ((github.event.action == 'labeled' && github.event.label.name == 'Release Approved') || (github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, 'Release Approved')))
        run: |
          echo "release_approver=true"

      # package.jsonのバージョンを取得する
      - name: Get current version
        id: cur_version
        run: |
          echo "$(jq -r '.version' package.json)"
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      # タグ(新バージョン)を生成する 「{YYYY.MM.DD}-{当日リリース回数}」
      - name: Generate release tag
        id: release_tag
        run: |
          today=$(date +'%Y.%m.%d')
          pre_release_date=$(echo ${{ steps.cur_version.outputs.version }} | awk -F'-' '{print $1}')
          pre_release_count=$(echo ${{ steps.cur_version.outputs.version }} | awk -F'-' '{print $2}')
          if [[ ! $pre_release_date = $today ]]; then
            echo "init count"
            pre_release_count=0
          fi
          echo "release_tag=$today-$(($pre_release_count + 1))" >> $GITHUB_OUTPUT

      # package.jsonのversionを更新する
      - name: Update version
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          yarn version --new-version "${{ steps.release_tag.outputs.release_tag }}"

      # 前回リリースからの差分をもとに、リリースノートの本文を生成する
      - name: Generate release note
        id: release_note
        run: |
          echo tag_name -> "${{ steps.release_tag.outputs.release_tag }}"
          echo "release_note=$(curl -X POST -H 'Accept: application/vnd.github+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/generate-notes -d '{"tag_name":"${{ steps.release_tag.outputs.release_tag }}", "previous_tag_name":"${{ steps.cur_version.outputs.version }}"}' | jq .body | sed 's/"//g')" >> $GITHUB_OUTPUT
          echo release_note

      # タグを切り、リリースノートを作成する
      - name: Create Release
        run: |
          echo "${{ steps.release_note.outputs.release_note }}"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{ \"tag_name\": \"${{ steps.release_tag.outputs.release_tag }}\", \"name\": \"${{ steps.release_tag.outputs.release_tag }}\", \"body\": \"${{ steps.release_note.outputs.release_note }}\"}" \
            https://api.github.com/repos/${{ github.repository }}/releases
      
      # 更新内容をpullする
      - name: Pull main
        run: |
          git config pull.rebase false
          git pull origin main

      # mainへのマージ
      - name: Enable auto-merge
        run: gh pr merge --rebase --auto "$PR_URL"

      # 更新内容をpushする
      - name: Push main
        run: |
          git push origin main
